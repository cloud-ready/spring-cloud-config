eureka:
  client:
    enabled: ${SERVICE_REGISTER_ENABLED:${EUREKA_CLIENT_ENABLED:false}}
    register-with-eureka: ${SERVICE_REGISTER_ENABLED:${EUREKA_CLIENT_REGISTERWITHEUREKA:false}}
    #registry-fetch-interval-seconds: ${EUREKA_CLIENT_REGISTRYFETCHINTERVALSECONDS:5}
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://user:user_pass@standalone.eureka:8761/eureka/}
  instance:
    health-check-url-path: ${server.servlet.context-path}${management.endpoints.web.base-path}/health
    # eureka.instance.hostname affect Status->instances's url href (not text) value on dashboard
    hostname: ${SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME:${EUREKA_INSTANCE_HOSTNAME:${SPRING_CLOUD_CLIENT_HOSTNAME:${eureka.instance.ip-address:localhost}}}}
    ip-address: ${SPRING_CLOUD_CONSUL_DISCOVERY_IPADDRESS:${EUREKA_INSTANCE_IPADDRESS:${HOST_IPADDRESS:${spring.cloud.client.ip-address}}}}
    lease-renewal-interval-in-seconds: ${EUREKA_INSTANCE_LEASERENEWALINTERVALINSECONDS:10}
    metadataMap:
      applicationId: ${spring.application.name}
      configPath: ${spring.cloud.config.server.prefix}
      management.context-path: ${server.servlet.context-path}${management.endpoints.web.base-path}
      management.port: ${management.server.port}
      health.path: "health"
      startup: ${random.int}
      user.name: ${spring.security.user.name:}
      user.password: ${spring.security.user.password:}
    prefer-ip-address: ${EUREKA_INSTANCE_PREFERIPADDRESS:false}
    status-page-url-path: ${server.servlet.context-path}${management.endpoints.web.base-path}/info
    # Registering a Secure Application
    #health-check-url: http[s]://${eureka.instance.hostname}:${server.port}${server.servlet.context-path}${management.endpoints.web.base-path}/health
    #status-page-url: http[s]://${eureka.instance.hostname}:${server.port}${server.servlet.context-path}${management.endpoints.web.base-path}/info

# logging request & response info, style can be http, curl, json, splunk
logbook:
  #exclude:
  include: "/**"
  format:
    style: ${LOGBOOK_FORMAT_STYLE:http}
  obfuscate:
    headers:
      #- Authorization
      - X-Secret
    parameters:
      - access_token
      - password
  write:
    max-body-size: 2000

logging:
  config: classpath:logback-spring.xml
  file: ${LOGGING_FILE:logs/spring.log}
  #path: ${LOGGING_PATH:${LOG_PATH:${user.dir}/data/logs/${spring.application.name}}}
  level:
    jndi: ${LOGGING_LEVEL_ROOT:INFO}
    org.springframework.amqp: ${LOGGING_LEVEL_ROOT:INFO}
    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:WARN}}
    org.springframework.beans.factory.annotation.InjectionMetadata: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    org.springframework.beans.factory.support.DefaultListableBeanFactory: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    org.springframework.context.annotation.AnnotationConfigApplicationContext: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:WARN}}
    org.springframework.core.env.MutablePropertySources: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    org.springframework.core.env.PropertySourcesPropertyResolver: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: INFO
    org.springframework.jndi: ${LOGGING_LEVEL_ROOT:INFO}
    org.springframework.web.context.support.StandardServletEnvironment: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    org.springframework.security: ${LOGGING_LEVEL_ROOT:INFO}
    org.zalando.logbook: ${APPLICATION_INSPECT_LOGGING_LEVEL:${LOGGING_LEVEL_ROOT:INFO}}
    root: ${LOGGING_LEVEL_ROOT:DEBUG}

management:
  endpoint:
    shutdown.enabled: ${MANAGEMENT_ENDPOINT_SHUTDOWN_ENABLED:true}
    health:
      # ALWAYS, WHEN_AUTHORIZED
      show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOWDETAILS:ALWAYS}
      #roles: ${MANAGEMENT_ENDPOINT_HEALTH_ROLES:ACTUATOR}
  endpoints:
    jmx:
      exposure:
        exclude: "${MANAGEMENT_ENDPOINTS_JMX_EXPOSURE_EXCLUDE:}"
        include: "${MANAGEMENT_ENDPOINTS_JMX_EXPOSURE_INCLUDE:*}"
    web: # since spring-boot 2.x
      base-path: ${MANAGEMENT_ENDPOINTS_WEB_BASEPATH:/actuator} # management.context-path deprecated since spring-boot 2.x
      exposure:
        exclude: "${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_EXCLUDE:}"
        include: "${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:*}"
  health:
    consul.enabled: ${MANAGEMENT_HEALTH_CONSUL_ENABLED:false}
    mail.enabled: ${MANAGEMENT_HEALTH_MAIL_ENABLED:false}
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 1ms,5ms
    enable:
      jvm: true
    export:
      datadog.enabled: true
    use-global-registry: true
  #port: # deprecated since spring-boot 2.x
  #security: # deprecated since spring-boot 2.x
  #  enabled: true
  #  roles: ADMIN # no ROLE_ prefix here
  server:
    port: ${server.port}

# consul needs endpoint.health to check service status,
# set sensitive to false will hide detailed infos but need not to authenticate.
# see: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide
#endpoints.health.sensitive: ${ENDPOINTS_HEALTH_SENSITIVE:false} # deprecated since spring-boot 2.x

server:
  address: ${SERVER_ADDRESS:${eureka.instance.ip-address}}
  servlet.context-path: ${SERVER_SERVLET_CONTEXTPATH:} # since spring-boot 2.x
  #context-path: ${SERVER_CONTEXTPATH:} # deprecated since spring-boot 2.x

spring.autoconfigure.exclude:
- org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration # spring-boot 1.x and 2.x
- org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration # spring-boot 1.x and 2.x

spring:
  #aop.auto: true
  #application.name is in bootstrap.yml
  boot.admin:
    client:
      api-path: ${SPRING_BOOT_ADMIN_CLIENT_APIPATH:instances}
      auto-deregistration: ${SPRING_BOOT_ADMIN_CLIENT_AUTODEREGISTRATION:true}
      auto-registration: ${SPRING_BOOT_ADMIN_CLIENT_AUTOREGISTRATION:true}
      enabled: ${SPRING_BOOT_ADMIN_CLIENT_ENABLED:false}
      period: 10s
      register-once: ${SPRING_BOOT_ADMIN_CLIENT_REGISTERONCE:true}
      username: ${spring.security.user.name:}
      password: ${spring.security.user.password:}
      instance:
        #health-url: ${SPRING_BOOT_ADMIN_CLIENT_HEALTHURL:}
        #management-url: ${SPRING_BOOT_ADMIN_CLIENT_MANAGEMENTURL:}
        metadata:
          user:
            name: ${spring.security.user.name:}
            password: ${spring.security.user.password:}
        name: ${SPRING_BOOT_ADMIN_CLIENT_NAME:${spring.application.name}}
        prefer-ip: ${SPRING_BOOT_ADMIN_CLIENT_PREFERIP:true}
        #service-base-url: ${SPRING_BOOT_ADMIN_CLIENT_SERVICEBASEURL:}
        #service-url: ${SPRING_BOOT_ADMIN_CLIENT_SERVICEURL:}
  cloud:
    config:
      # see: org.springframework.cloud.config.monitor.PropertyPathEndpoint
      monitor.endpoint.path: ${SPRING_CLOUD_CONFIG_SERVER_MONITOR_ENDPOINT_PATH:/config}
      discovery:
        enabled: false
        service-id: ${spring.application.name}
      server:
        default-application-name: application
        default-label: ${SPRING_CLOUD_CONFIG_SERVER_DEFAULTLABEL:master}
        default-profile: ${SPRING_CLOUD_CONFIG_SERVER_DEFAULTPROFILE:default}
        encrypt:
          hmac-secret: ${SPRING_CLOUD_CONFIG_SERVER_ENCRYPT_HMACSECRET:secret} # custom property: hmac-secret
          enabled: ${SPRING_CLOUD_CONFIG_SERVER_ENCRYPT_ENABLED:true}
        health.repositories: # default is 'app'
          health-check-repository:
            name: ${SPRING_CLOUD_CONFIG_SERVER_HEALTH_REPOSITORIES_HEALTHCHECKREPOSITORY:health-check}
        git:
          clone-on-start: ${SPRING_CLOUD_CONFIG_SERVER_GIT_CLONEONSTART:false}
          delete-untracked-branches: ${SPRING_CLOUD_CONFIG_SERVER_GIT_DELETEUNTRACKEDBRANCHES:true}
          deploy-key: ${SPRING_CLOUD_CONFIG_SERVER_GIT_DEPLOYKEY:classpath:default-deploy_key} # custom property: deploy-key
          # Property 'spring.cloud.config.server.git.privateKey' must be set when 'spring.cloud.config.server.git.ignoreLocalSshSettings' is specified
          #ignore-local-ssh-settings: ${SPRING_CLOUD_CONFIG_SERVER_GIT_IGNORELOCALSSHSETTINGS:true}
          force-pull: ${SPRING_CLOUD_CONFIG_SERVER_GIT_FORCEPULL:true}
          known-hosts-file: ${SPRING_CLOUD_CONFIG_SERVER_GIT_KNOWNHOSTSFILE:/dev/null}
          parent-support-enabled: ${SPRING_CLOUD_CONFIG_SERVER_GIT_PARENTSUPPORTENABLED:true} # custom property: parent-support-enabled
          search-paths: ${AUTH_CONFIG_SEARCHPATHS:auth-label-{label},auth-profile-{profile}}
          strict-host-key-checking: ${SPRING_CLOUD_CONFIG_SERVER_GIT_STRICTHOSTKEYCHECKING:false}
          timeout: ${SPRING_CLOUD_CONFIG_SERVER_GIT_TIMEOUT:30}
          #uri: ${GIT_PREFIX:ssh://git@gitlab:20022/spring-cloud-config-server}/{application}-config.git
          uri: ${GIT_PREFIX:https://gitlab.com/spring-cloud-config-server}/{application}-config.git
        # see: org.springframework.cloud.config.monitor.EnvironmentMonitorAutoConfiguration
        monitor:
          bitbucket.enabled: ${SPRING_CLOUD_CONFIG_SERVER_MONITOR_BITBUCKET_ENABLED:false}
          github.enabled: ${SPRING_CLOUD_CONFIG_SERVER_MONITOR_GITHUB_ENABLED:false}
          gitlab.enabled: ${SPRING_CLOUD_CONFIG_SERVER_MONITOR_GITLAB_ENABLED:false}
          gitlabrepo.enabled: ${SPRING_CLOUD_CONFIG_SERVER_MONITOR_GITLABREPO_ENABLED:false} # custom property: gitlabrepo.enabled
        prefix: ${SPRING_CLOUD_CONFIG_SERVER_PREFIX:/config}
    consul:
      discovery:
        enabled: ${SERVICE_REGISTER_ENABLED:${SPRING_CLOUD_CONSUL_DISCOVERY_ENABLED:false}}
        health-check-path: ${server.servlet.context-path:}${management.endpoints.web.base-path:}/health
        hostname: ${eureka.instance.hostname}
        ip-address: ${eureka.instance.ip-address}
        prefer-ip-address: ${SPRING_CLOUD_CONSUL_DISCOVERY_PREFERIPADDRESS:${eureka.instance.prefer-ip-address}}
      enabled: ${SPRING_CLOUD_CONSUL_ENABLED:false}
    discovery.client.composite-indicator.enabled: ${SERVICE_REGISTER_ENABLED:true}
    inetutils:
      preferred-networks: ${SPRING_CLOUD_INETUTILS_PREFERREDNETWORKS:^192\.168\..+, ^172\.30\..+, ^10\..+}
      ignored-interfaces: ${SPRING_CLOUD_INETUTILS_IGNOREDINTERFACES:^[a-z]?tun[0-9]*, ^awdl[0-9]*, ^lo[0-9]*}
    service-registry:
      # custom property
      auto-multi-registration.enabled: ${SERVICE_REGISTER_ENABLED:${SPRING_CLOUD_SERVICEREGISTRY_AUTOMULTIREGISTRATION_ENABLED:${spring.cloud.service-registry.auto-registration.enabled:true}}}
      # see: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration
      auto-registration:
        enabled: ${SERVICE_REGISTER_ENABLED:${SPRING_CLOUD_SERVICEREGISTRY_AUTOREGISTRATION_ENABLED:false}}
        fail-fast: ${SPRING_CLOUD_SERVICEREGISTRY_AUTOREGISTRATION_FAILFAST:true}
    #rabbitmq:
    #  host: ${SPRING_RABBITMQ_HOST:cloudbus}
    #  port: ${SPRING_RABBITMQ_PORT:5672}
    #  username: ${SPRING_RABBITMQ_USERNAME:user}
    #  password: ${SPRING_RABBITMQ_PASSWORD:user_pass}
  security: # spring-boot 2.x security properties
    enabled: ${SPRING_SECURITY_ENABLED:true} # see: https://github.com/spring-projects/spring-boot/issues/12323
    user:
      name: ${SPRING_SECURITY_USER_NAME:admin}
      password: ${SPRING_SECURITY_USER_PASSWORD:admin_pass}
      roles: ${SPRING_SECURITY_USER_ROLES:ACTUATOR, ADMIN, SUPERUSER, USER}
    hook:
      name: ${SPRING_SECURITY_HOOK_NAME:hook}
      password: ${SPRING_SECURITY_HOOK_PASSWORD:hook_pass}


---
spring:
  profiles: port_nonsecure

eureka.instance:
  # eureka.instance.instance-id affect Status->instances's url text (not href) value on dashboard
  instance-id: ${spring.application.name}:${eureka.instance.hostname}:${eureka.instance.non-secure-port}
  non-secure-port: ${server.port}
  non-secure-port-enabled: true
  secure-port-enabled: false

#logging:
#  file: ${LOGGING_FILE:${LOG_FILE:${eureka.instance.hostname}-${eureka.instance.secure-port}.log}}

server:
  port: ${EUREKA_INSTANCE_NONSECUREPORT:${SERVER_PORT:8888}}

spring.boot.admin:
  client.url: http://${eureka.instance.hostname}:${server.port}${server.servlet.context-path:}

spring.cloud.consul:
  discovery:
    health-check-url: http://${eureka.instance.hostname}:${eureka.instance.non-secure-port}${consul.discovery.health-check-path}
    # consul's instance-id must start with letters, hostname could be an ip address, so place spring.application.name at first position.
    instance-id: ${eureka.instance.instance-id}

---
spring:
  profiles: port_secure

eureka.instance:
  # eureka.instance.instance-id affect Status->instances's url text (not href) value on dashboard
  instance-id: ${spring.application.name}:${eureka.instance.hostname}:${eureka.instance.secure-port}
  non-secure-port-enabled: false
  secure-port: ${server.port}
  secure-port-enabled: true

#logging:
#  file: ${LOGGING_FILE:${LOG_FILE:${eureka.instance.hostname}-${eureka.instance.secure-port}.log}}

server:
  port: ${EUREKA_INSTANCE_SECUREPORT:${SERVER_PORT:8888}}

spring.boot.admin:
  client.url: https://${eureka.instance.hostname}:${server.port}${server.servlet.context-path:}

spring.cloud.consul:
  discovery:
    health-check-url: https://${eureka.instance.hostname}:${eureka.instance.secure-port}${consul.discovery.health-check-path}
    # consul's instance-id must start with letters, hostname could be an ip address, so place spring.application.name at first position.
    instance-id: ${eureka.instance.instance-id}

---
spring:
  profiles: develop.env

---
spring:
  profiles: it.env

---
spring:
  profiles: staging.env

---
spring:
  profiles: production.env
